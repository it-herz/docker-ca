#!/bin/bash

mkdir -p /usr/lib/ssl/CA
mkdir -p /var/www

WEBDIR=/var/www

if [ ! -f /usr/lib/ssl/CA/initialized ]
then
  mkdir -p /usr/lib/ssl/CA/newcerts
  mkdir -p /usr/lib/ssl/CA/private
  mkdir -p /storage/crt
  mkdir -p /storage/req
  mkdir -p /etc/ssl/p12
  mkdir -p /var/www/certs
  mkdir -p /var/www/crl

  cp /openssl.cnf /usr/lib/ssl/
  sed -i "s~#DIR#~$DIR~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#WEBDIR#~$WEBDIR~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#DAYS#~$DAYS~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#CRLDAYS#~$CRLDAYS~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#KEYLENGTH#~$KEYLENGTH~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#COUNTRY#~$COUNTRY~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#STATE#~$STATE~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#LOCALITY#~$LOCALITY~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#ORGANIZATION#~$ORGANIZATION~ig" /usr/lib/ssl/openssl.cnf
  sed -i "s~#OU#~$OU~ig" /usr/lib/ssl/openssl.cnf

  echo "$PASSWORD" >/password
  cd /usr/lib/ssl/CA
  echo '$STARTSERIAL' >serial
  echo '$STARTCRL' >crlnumber

  touch /usr/lib/ssl/CA/index.txt

  cp /ca.req /usr/lib/ssl/CA/ca.req
  sed -i "s~#DIR#~$DIR~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#WEBDIR#~$WEBDIR~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#DAYS#~$DAYS~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#CRLDAYS#~$CRLDAYS~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#KEYLENGTH#~$KEYLENGTH~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#COUNTRY#~$COUNTRY~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#STATE#~$STATE~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#LOCALITY#~$LOCALITY~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#ORGANIZATION#~$ORGANIZATION~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#OU#~$OU~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#CLIENTDAYS#~$CLIENTDAYS~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#CAHOST#~$CAHOST~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#PASSWORD#~$PASSWORD~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#EMAIL#~$EMAIL~ig" /usr/lib/ssl/CA/ca.req
  sed -i "s~#WEBHOST#~$WEBHOST~ig" /usr/lib/ssl/CA/ca.req

  openssl req -new -config /usr/lib/ssl/CA/ca.req -keyout /usr/lib/ssl/CA/private/cakey.pem -utf8 -out /usr/lib/ssl/CA/careq.pem
  openssl ca -create_serial -out /usr/lib/ssl/CA/cacert.pem -days $DAYS -key $PASSWORD -batch -config /usr/lib/ssl/CA/ca.req \
                            -keyfile /usr/lib/ssl/CA/private/cakey.pem -selfsign \
                            -extensions v3_ca \
                            -utf8 -infiles /usr/lib/ssl/CA/careq.pem
                           
  openssl ca -keyfile /usr/lib/ssl/CA/private/cakey.pem -cert /usr/lib/ssl/CA/cacert.pem -gencrl -out /var/www/ca.crl -passin file:/password
  openssl x509 -in /usr/lib/ssl/CA/cacert.pem -out /var/www/ca.der -outform DER

  cp /usr/lib/ssl/CA/cacert.pem /var/www/ca.crt
  cp /usr/lib/ssl/CA/cacert.pem /storage/crt/ca.cert
  cp /usr/lib/ssl/CA/cacert.pem /storage/crt/$CA_HOST.cert
  cp /usr/lib/ssl/CA/private/cakey.pem /etc/ssl/private/$CA_HOST.key
  touch /usr/lib/ssl/CA/initialized
fi

if [ $# -eq 0 ]
then
  echo "Usage:"
  echo "signhost <fqdn> - sign new host"
  echo "signaccount <email> - sign new account"
  echo "revoke <fqdn> - revoke host"
  exit 0
fi

if [ "$1" == "signhost" ]
then
  HOST=$2
  echo Signing host $HOST
  exit 0
fi

if [ "$1" == "signaccount" ]
then
  ACCOUNT=$2
  echo Signing account $ACCOUNT
  exit 0
fi

if [ "$1" == "revoke" ]
then
  CN=$2
  echo Revoking account $CN
  exit 0
fi

